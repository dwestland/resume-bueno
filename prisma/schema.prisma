generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todo")
}

enum SubscriptionPlan {
  MONTHLY
  YEARLY
  NONE

  @@map("subscription_plan")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE

  @@map("subscription_status") 
}

// NextAuth
model User {
  id                String           @id @default(cuid())
  name              String?
  email             String           @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]
  // Resume Fields
  awards            String?
  certificates      String?
  education         String?
  experience        String?
  hobbies_interests String?
  projects          String?
  resume            String?
  skills            String?
  training          String?
  volunteering      String?
  // Business fields
  credits             Int               @default(20)
  stripe_customer_id  String?           @unique
  // Subscription fields
  subscription_plan   SubscriptionPlan  @default(NONE)
  subscription_status SubscriptionStatus @default(INACTIVE)
  subscription_start  DateTime?
  subscription_end    DateTime?
  subscription_id     String?           @unique
  // Relationships
  customResumes      UserCustomResume[]
  purchases          Purchase[]
  deleted_at         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("message")
}

enum PurchaseType {
  SUBSCRIPTION_MONTHLY
  SUBSCRIPTION_YEARLY
  CREDIT_PURCHASE

  @@map("purchase_type")
}

model Purchase {
  id                  String        @id @default(cuid())
  user_id             String
  amount              Float
  currency            String        @default("usd")
  purchase_type       PurchaseType
  credits_added       Int           @default(0)
  stripe_session_id   String?       @unique
  stripe_invoice_id   String?
  status              String        @default("pending") // pending, completed, failed
  user                User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("purchase")
}

enum ProductType {
  RESUME_PACKAGE
  MATCHING_RESUME

  @@map("product_type")
}

model CustomResume {
  id                  Int               @id @default(autoincrement())
  title               String?
  job_description     String?
  custom_resume       String?
  cover_letter        String?
  job_evaluation      String?
  matching_resume     String?
  product_type        ProductType?
  
  // Relation fields
  users              UserCustomResume[]
  
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@map("custom_resume")
}

model UserCustomResume {
  userId         String
  customResumeId Int
  
  // Relation fields
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  customResume   CustomResume @relation(fields: [customResumeId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@id([userId, customResumeId])
  @@map("user_custom_resume")
}
